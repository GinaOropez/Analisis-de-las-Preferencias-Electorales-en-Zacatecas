# -*- coding: utf-8 -*-
"""Análisis de las Preferencias Electorales en el Zacatecas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YvZ9USzcdSseLYn4RmBWigTyKiqCXzHb
"""

import sys
print(sys.version)

!python --version

"""# Análisis de las Preferencias Electorales en Zacatecas

---


En este código encontrará cómo se realizó el análisis de datos para el estado de Zacatecas.

## Librerías
"""

#Las librerías empleadas son:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files

"""## Exportar base de datos

*   Base de datos leída apartir de un csv.
"""

# Subir archivo desde la PC
uploaded = files.upload()

# Leer archivo CSV
df = pd.read_csv('ZACATECAS-BASE CODIFICACIÓN 2.csv')

# Eliminar columnas "Unnamed" automáticamente
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

# Mostrar las primeras filas del DataFrame (Base de datos interna)
print("Datos originales:")
print(df.head())
print(df.dtypes)

"""## Tabla por regiones a analizar"""

# Clave de los municipios que componen a la región a analizar
clave_region = [7,26,27,41,51]

# Filtrar el DataFrame para incluir solo las filas donde 'Clave' está en clave_region
df_filtrado_NORTE = df[df['CLAVE'].isin(clave_region)]

# Mostrar el DataFrame resultante correspondiente a la región
print("Datos de la región NORTE") #Cambiar nombre según corresponda
print(df_filtrado_NORTE)

"""## Estadísticas Descriptivas


"""

# Clave de los municipios que componen a la región a analizar
clave_region = [7,26,27,41,51]

# Filtrar el DataFrame para incluir solo las filas donde 'Clave' está en clave_region
df_filtrado_NORTE = df[df['CLAVE'].isin(clave_region)]

# Mostrar el DataFrame resultante
print("Datos de la región NORTE")
print(df_filtrado_NORTE)

"""## Histograma

 Se genera a partir de la tabla de frecuencias por periodo en cierta región
"""

#REGIÓN NORTE

# Generar histogramas para cada columna de frecuencias
frecuencias_columns = [col for col in tabla_frecuencias_NORTE.columns if 'PERIODO' in col]

for col in frecuencias_columns:
    # Crear un DataFrame con las frecuencias para el histograma
    freq_data = tabla_frecuencias_NORTE[col].drop('Total')
    valores = [0, 1, 2, 3]

    plt.figure()
    plt.bar(valores, freq_data, width=0.6, edgecolor='k', alpha=0.7, color='Purple')
    plt.title(f'Histograma de {col}')
    plt.xlabel('Valor')
    plt.ylabel('Frecuencia')
    plt.xticks(valores)  # Hay que verificar que los valores en el eje x sean 0, 1, 2, 3

    # Ajustar el eje y para mostrar solo números enteros
    y_max = int(np.ceil(max(freq_data)))  # Valor máximo del eje y
    plt.yticks(np.arange(0, y_max + 1, 1))  # Rango de valores enteros en el eje y

    #plt.grid(True)
    plt.show()

"""## Tabla de Frecuencias"""

# Inicializar un diccionario para almacenar las frecuencias (consideramos 0,1,2,3 por la codificación)
frecuencias = {0: [], 1: [], 2: [], 3: []}

# Obtener el calculo de la frecuencia partiendo de la tercer columna (inician los periodos)
columnas_relevantes = df_filtrado_NORTE.columns[2:]

# Contar las frecuencias de 0, 1, 2 y 3 en cada columna "PERIODO"
for col in columnas_relevantes:
    frecuencias[0].append((df_filtrado_NORTE[col] == 0).sum())
    frecuencias[1].append((df_filtrado_NORTE[col] == 1).sum())
    frecuencias[2].append((df_filtrado_NORTE[col] == 2).sum())
    frecuencias[3].append((df_filtrado_NORTE[col] == 3).sum())

# Crear un DataFrame con las frecuencias y transponerlo (Para generar la tabla final de frecuencias)
tabla_frecuencias_NORTE = pd.DataFrame(frecuencias, index=columnas_relevantes).T

# Calcular la suma de cada columna y añadirlo como una nueva fila (Como dato informativo y para tener un control en el conteo de cada periodo en cada región)
suma_filas = tabla_frecuencias_NORTE.sum(axis=0)
tabla_frecuencias_NORTE.loc['Total'] = suma_filas

# Mostrar la tabla de frecuencias
print("Tabla de Frecuencias Región NORTE:")
print(tabla_frecuencias_NORTE)

"""## Probabilidad

Aquí, calculamos la probabilidad de cada periodo, considerando la tabla de frecuencia calculada anteriormente.
"""

# Inicializar un diccionario para almacenar las frecuencias (consideramos 0,1,2,3 por la codificación)
frecuencias = {0: [], 1: [], 2: [], 3: []}

# Obtener el calcuo de la frecuencia partiendo de la tercer columna (inician los periodos)
columnas_relevantes = df_filtrado_NORTE.columns[2:]

# Contar las frecuencias de 0, 1, 2 y 3 en cada columna "PERIODO"
for col in columnas_relevantes:
    frecuencias[0].append((df_filtrado_NORTE[col] == 0).sum())
    frecuencias[1].append((df_filtrado_NORTE[col] == 1).sum())
    frecuencias[2].append((df_filtrado_NORTE[col] == 2).sum())
    frecuencias[3].append((df_filtrado_NORTE[col] == 3).sum())

# Crear un DataFrame con las frecuencias y transponerlo (Para generar la tabla final de frecuencias)
tabla_frecuencias_NORTE = pd.DataFrame(frecuencias, index=columnas_relevantes).T

# Calcular la suma de cada columna y añadirlo como una nueva fila (Como dato informativo y paratener un control en el conteo de cada periodo en cada región)
suma_filas = tabla_frecuencias_NORTE.sum(axis=0)
tabla_frecuencias_NORTE.loc['Total'] = suma_filas

# Calcular las probabilidades dividiendo cada valor por la suma de su columna
tabla_probabilidades_NORTE = tabla_frecuencias_NORTE.div(tabla_frecuencias_NORTE.loc['Total'], axis=1)

# Eliminar la fila 'Total' de la tabla de frecuencias
tabla_probabilidades_NORTE = tabla_probabilidades_NORTE.drop(index='Total')

# Calcular la suma de cada columna de la tabla de probabilidades
suma_columnas_probabilidades_NORTE = tabla_probabilidades_NORTE.sum(axis=0)

# Añadir la fila 'Probabilidad total' a la tabla de probabilidades
tabla_probabilidades_NORTE.loc['Probabilidad total'] = suma_columnas_probabilidades_NORTE

# Mostrar la tabla de frecuencias y la tabla de probabilidades
print("Tabla de Frecuencias NORTE:")
print(tabla_frecuencias_NORTE)
print("\nTabla de Probabilidades NORTE:")
print(tabla_probabilidades_NORTE)

"""## Entropía

Con el siguiente código, comenzamos con la tabla de frecuencias, generamos la tabla de probabilidades a partir de ella, y finalmente obtenemos la tabla que contiene la entropía.
"""

# Inicializar un diccionario para almacenar las frecuencias (consideramos 0,1,2,3 por la codificación)
frecuencias = {0: [], 1: [], 2: [], 3: []}

# Obtener el calcuo de la frecuencia partiendo de la tercer columna (inician los periodos)
columnas_relevantes = df_filtrado_NORTE.columns[2:]

# Contar las frecuencias de 0, 1, 2 y 3 en cada columna "PERIODO"
for col in columnas_relevantes:
    frecuencias[0].append((df_filtrado_NORTE[col] == 0).sum())
    frecuencias[1].append((df_filtrado_NORTE[col] == 1).sum())
    frecuencias[2].append((df_filtrado_NORTE[col] == 2).sum())
    frecuencias[3].append((df_filtrado_NORTE[col] == 3).sum())

# Crear un DataFrame con las frecuencias y transponerlo (Para generar la tabla final de frecuencias)
tabla_frecuencias_NORTE = pd.DataFrame(frecuencias, index=columnas_relevantes).T

# Calcular la suma de cada columna y añadirlo como una nueva fila (Como dato informativo y paratener un control en el conteo de cada periodo en cada región)
suma_filas = tabla_frecuencias_NORTE.sum(axis=0)
tabla_frecuencias_NORTE.loc['Total'] = suma_filas

# Calcular las probabilidades dividiendo cada valor por la suma de su columna
tabla_probabilidades_NORTE = tabla_frecuencias_NORTE.div(tabla_frecuencias_NORTE.loc['Total'], axis=1)

# Eliminar la fila 'Total' de la tabla de frecuencias
tabla_probabilidades_NORTE = tabla_probabilidades_NORTE.drop(index='Total')

# Calcular la suma de cada columna de la tabla de probabilidades
suma_columnas_probabilidades_NORTE = tabla_probabilidades_NORTE.sum(axis=0)

# Añadir la fila 'Probabilidad total' a la tabla de probabilidades
tabla_probabilidades_NORTE.loc['Probabilidad total'] = suma_columnas_probabilidades_NORTE

# Eliminar la fila 'Probabilidad total' de la tabla de probabilidades
tabla_probabilidades_NORTE = tabla_probabilidades_NORTE.drop(index='Probabilidad total')

#Total de frecuencias
total = 5

# Calcular la entropía para cada valor en cada columna
def calcular_entropia(probabilidades):
    # Reemplazar 0 con np.nan para evitar log2(0) (evitar errores)
    probabilidades = probabilidades.replace(0, np.nan)
    return - ((probabilidades / total) * np.log2(probabilidades / total)).fillna(0) #NORMALIZADO

# Aplicar la función para cada columna
entropia_NORTE = tabla_probabilidades_NORTE.apply(calcular_entropia, axis=0)

# Crear una tabla con la entropía total por columna
entropia_total_NORTE = entropia_NORTE.sum(axis=0)

# Añadir la fila 'Entropía Total' a la tabla de entropía detallada
entropia_NORTE.loc['Entropía Total NORTE'] = entropia_total_NORTE

# Guardar la tabla que desglosada la entropía en un archivo CSV (Esto sirve para poder generar la tabla de la cual se obtienen los mapas de calor)
entropia_NORTE.to_csv('tabla_entropia_NORTE.csv', index=True)

# Leer archivo CSV, especificando la codificación 'latin-1'
df_NORTE= pd.read_csv('tabla_entropia_NORTE.csv')

# Mostrar la tabla de frecuencias, la tabla de probabilidades y la tabla desglosada de entropía
print("Tabla de Frecuencias:")
print(tabla_frecuencias_NORTE)
print("\nTabla de Probabilidades:")
print(tabla_probabilidades_NORTE)
print("\nTabla de Entropía:")
print(entropia_NORTE)

"""## Energía

Para el cálculo de la energía, recurrimos a la tabla de probabilidad y, con base en ella, realizamos el cálculo correspondiente en cada período.
"""

# Inicializar un diccionario para almacenar las frecuencias (consideramos 0,1,2,3 por la codificación)
frecuencias = {0: [], 1: [], 2: [], 3: []}

# Obtener el cálculo de la frecuencia partiendo de la tercera columna (inician los periodos)
columnas_relevantes = df_filtrado_NORTE.columns[2:]

# Contar las frecuencias de 0, 1, 2 y 3 en cada columna "PERIODO"
for col in columnas_relevantes:
    frecuencias[0].append((df_filtrado_NORTE[col] == 0).sum())
    frecuencias[1].append((df_filtrado_NORTE[col] == 1).sum())
    frecuencias[2].append((df_filtrado_NORTE[col] == 2).sum())
    frecuencias[3].append((df_filtrado_NORTE[col] == 3).sum())

# Crear un DataFrame con las frecuencias y transponerlo (Para generar la tabla final de frecuencias)
tabla_frecuencias_NORTE = pd.DataFrame(frecuencias, index=columnas_relevantes).T

# Calcular la suma de cada columna y añadirlo como una nueva fila (como dato informativo para tener control en el conteo de cada periodo en cada región)
suma_filas = tabla_frecuencias_NORTE.sum(axis=0)
tabla_frecuencias_NORTE.loc['Total'] = suma_filas

# Calcular las probabilidades dividiendo cada valor por la suma de su columna
tabla_probabilidades_NORTE = tabla_frecuencias_NORTE.div(tabla_frecuencias_NORTE.loc['Total'], axis=1)

# Eliminar la fila 'Total' de la tabla de frecuencias
tabla_probabilidades_NORTE = tabla_probabilidades_NORTE.drop(index='Total')

# Crear un vector con las codificaciones correspondientes a cada fila
codificaciones = pd.Series([0, 1, 2, 3], index=tabla_probabilidades_NORTE.index)

# Función para calcular la energía: multiplicar la probabilidad por la codificación correspondiente
def calcular_energia(probabilidades, codificaciones):
    # Multiplicar la probabilidad por la codificación fila por fila
    energia_renglon = probabilidades * codificaciones
    # Sumar la energía de cada fila para obtener la energía total de la columna
    return energia_renglon.sum()

# Calcular la energía para cada columna
energia_por_columna = []
for col in columnas_relevantes:
    energia = calcular_energia(tabla_probabilidades_NORTE[col], codificaciones)
    energia_por_columna.append(energia)

# Crear una tabla con la energía total por columna
tabla_energia_columna_NORTE = pd.DataFrame(energia_por_columna, index=columnas_relevantes, columns=['Energía Total'])

# Transponer la tabla de energía
tabla_energia_columna_NORTE_transpuesta = tabla_energia_columna_NORTE.T

# Guardar la tabla desglosada de energía en un archivo CSV
tabla_energia_columna_NORTE_transpuesta.to_csv('tabla_energia_NORTE.csv', index=True)

# Leer el archivo CSV, especificando la codificación 'latin-1'
df_NORTE_energia = pd.read_csv('tabla_energia_NORTE.csv', encoding='latin-1')

# Mostrar las tablas de frecuencias, probabilidades y energía por columna
print("Tabla de Frecuencias:")
print(tabla_frecuencias_NORTE)
print("\nTabla de Probabilidades:")
print(tabla_probabilidades_NORTE)
print("\nTabla de Energía:")
print(tabla_energia_columna_NORTE_transpuesta)

"""## Mapas de calor

### Entropía

Apartir de la tabla que reune los valores de entropía se construye el mapa de calor.

* Tabla de entropía
"""

# Consideramos cada tabla guardada para cada región
dfs_entropia = [df_NORTE, df_NOROESTE, df_OESTE, df_CENTRO, df_SURESTE, df_SUROESTE, df_CENTROSUR, df_SUR]  # Importante, no olvidar que el nombre debe de estár bien escrito

# Crear una lista para almacenar las últimas filas de cada DataFrame
last_rows_list = []

# Iterar sobre cada DataFrame y extraer la última fila
for df in dfs_entropia:
    if not df.empty:
        last_row = df.iloc[-1:]  # Obtiene la última fila
        last_rows_list.append(last_row)

# Combinar todas las últimas filas en una nueva tabla
new_table = pd.concat(last_rows_list, axis=0)

# Para modificar el indice númerico
new_table = new_table.reset_index(drop=True)

# Guardar la nueva tabla en un archivo CSV
new_table.to_csv("ENTROPIAS-ZACATECAS.csv", index=False)

# Mostrar la nueva tabla
print(new_table)

"""* Mapa de calor"""

# Semilla para reproducibilidad
np.random.seed(2)

# Datos
data = pd.read_csv("ENTROPIAS-ZACATECAS.csv")

# Seleccionar solo las columnas relevantes
data = data[['PERIODO1', 'PERIODO2', 'PERIODO3', 'PERIODO4', 'PERIODO5', 'PERIODO6', 'PERIODO7', 'PERIODO8']]

# Renombrar las columnas para agregar espacio entre "PERIODO" y el número
data.columns = ['Periodo 1', 'Periodo 2', 'Periodo 3', 'Periodo 4', 'Periodo 5', 'Periodo 6', 'Periodo 7', 'Periodo 8']

# Agregar nombres de las regiones
regiones = ['Norte', 'Noroeste', 'Oeste', 'Centro', 'Sureste', 'Suroeste', 'Centro sur', 'Sur']
data.index = regiones

# Crear el mapa de calor
plt.figure(figsize=(9, 5))
sns.heatmap(data, cmap='Purples', annot=True)
plt.title('Mapa de calor de entropía de la delimitación territorial de Zacatecas')
plt.xlabel('')  # Eliminar el título del eje x
plt.ylabel('Regiones')

plt.show()

"""### Energía

Apartir de la tabla que reune los valores de energía se construye el mapa de calor.

* Tabla de energía
"""

# Consideramos cada tabla guardada para cada región
dfs_energia = [df_NORTE_energia , df_NOROESTE_energia, df_OESTE_energia, df_CENTRO_energia
               , df_SURESTE_energia, df_SUROESTE_energia, df_CENTROSUR_energia, df_SUR_energia]   # Importante, no olvidar que el nombre debe de estár bien escrito

# Crear una lista para almacenar las últimas filas de cada DataFrame
last_rows_list = []

# Iterar sobre cada DataFrame y extraer la última fila
for df in dfs_energia:
    if not df.empty:
        last_row = df.iloc[-1:]  # Obtiene la última fila
        last_rows_list.append(last_row)

# Combinar todas las últimas filas en una nueva tabla
new_table = pd.concat(last_rows_list, axis=0)

# Para modificar el indice númerico
new_table = new_table.reset_index(drop=True)

# Guardar la nueva tabla en un archivo CSV
new_table.to_csv("ENERGÍA-ZACATECAS.csv", index=False)

# Mostrar la nueva tabla
print(new_table)

"""* Mapa de calor"""

# Semilla para reproducibilidad
np.random.seed(2)

# Datos
data = pd.read_csv("ENERGÍA-ZACATECAS.csv")

# Seleccionar solo las columnas relevantes
data = data[['PERIODO1', 'PERIODO2', 'PERIODO3', 'PERIODO4', 'PERIODO5', 'PERIODO6', 'PERIODO7', 'PERIODO8']]

# Renombrar las columnas para agregar espacio entre "PERIODO" y el número
data.columns = ['Periodo 1', 'Periodo 2', 'Periodo 3', 'Periodo 4', 'Periodo 5', 'Periodo 6', 'Periodo 7', 'Periodo 8']

# Agregar nombres de las regiones
regiones = ['Norte', 'Noroeste', 'Oeste', 'Centro', 'Sureste', 'Suroeste', 'Centro sur', 'Sur']
data.index = regiones

# Crear el mapa de calor
plt.figure(figsize=(9, 5))
sns.heatmap(data, cmap='Purples', annot=True)
plt.title('Mapa de calor de energía de la delimitación territorial de Zacatecas')
plt.xlabel('')  # Eliminar el título del eje x
plt.ylabel('Regiones')

plt.show()